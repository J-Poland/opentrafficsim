@startuml

note as N1
     Not all relations 
    shown are formal
      UML relations.
end note

package base.geometry {
    note as N1
        OtsLocatable is used for simulation objects
        and drawing. Hence it makes sense that
        OtsLocatable and its OtsShape are in base.
    end note
    
    interface SpatialObject {
        + Polygon2d getContour()
    }

    interface DynamicSpatialObject extends SpatialObject {
        + Polygon2d getContour(Time time)
    }

    interface OtsLocatable extends SpatialObject {
        + Point2d getLocation()
        + Bounds2d getBounds()
        + OtsShape getShape()
    }
    OtsShape --* OtsLocatable: < has
    
    interface OtsShape {
        + boolean contains(Point2d point)
        + double signedDistance(Point2d point)
    }
    
    note left of OtsShape
        OtsShape has min/max for X and Y 
        and could extend a future version of
        Bounds2d stripped of complicated
        methods. Then OtsLocatable can
        drop one method. This first needs
        to change in DSOL.
    end note

    class CircleShape implements OtsShape
    class OffsetRectangleShape implements OtsShape
    class PolygonShape implements OtsShape
    class RectangleShape implements OtsShape
    class RoundedRectangleShape implements OtsShape
}

package core {
    class Link implements base.geometry.OtsLocatable {
        - OtsLine2d designLine
    }
    core.geometry.OtsLine2d --* Link::designLine

    'class Node implements base.geometry.OtsLocatable

    'class Gtu implements base.geometry.OtsLocatable, base.geometry.DynamicSpatialObject

    'interface LocatedObject extends base.geometry.OtsLocatable {
    '    + Length getHeight()
    '    + String getFullId()
    '}

    'class StaticObject implements LocatedObject
    
    package geometry {
        note as N1
            ContinousLine implementations are used to 
            generate OtsLine2d (e.g. for Link) and contours.
            Hence it makes sense ContinuousLine is in core.
        end note
    
        class OtsLine2d {
            + OtsLine2d(PolyLine2d line)
        }
        
        interface FlattableLine
        FlattableLine -> Flattener::flatten
        
        interface Flattener {
            + PolyLine2d flatten(FlattableLine line)
        }
        Flattener::flatten -> OtsLine2d::OtsLine2d
        
        interface ContinuousLine {
            + PolyLine2d flatten(Flattener flattener)
            + PolyLine2d flattenOffset(FractionalLengthData offsets, Flattener flattener)
        }
        
        class ContinuousArc implements ContinuousLine
        ContinuousArc -> FlattableLine
        class ContinuousBezierCubic implements ContinuousLine
        ContinuousBezierCubic -> FlattableLine
        class ContinuousClothoid implements ContinuousLine
        ContinuousClothoid -> FlattableLine
        class ContinuousPolyLine implements ContinuousLine
        ContinuousPolyLine -> FlattableLine
        class ContinuousStraight implements ContinuousLine
        ContinuousStraight -> FlattableLine
    }
}
core --> base

package draw {
    interface ClickableLocatable extends base.geometry.OtsLocatable

    interface ClickablePointLocatable extends draw.ClickableLocatable

    class NodeAnimation extends OtsRenderable implements draw.ClickablePointLocatable
    
    class OtsRenderable
    OtsRenderable o-- base.geometry.OtsLocatable: draws >
}
draw --> base

package road {
    class CrossSectionElement implements base.geometry.OtsLocatable {
        - OtsLine2d centerLine
    }
    core.geometry.OtsLine2d --* CrossSectionElement::centerLine

    'class Lane extends road.CrossSectionElement

    'interface LaneBasedObject extends core.LocatedObject {
    '    + Lane getLane()
    '    + Length getLongitudinalPosition()
    '    + Length getLength()
    '    + PolyLine2d getLine()
    '}

    'class LaneBasedGtu extends core.Gtu implements road.LaneBasedObject

    'interface Detector extends core.LocatedObject
}
road --> core

@enduml